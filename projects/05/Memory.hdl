// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux4Way(in=load, sel=address[13..14], a=loadram1, b=loadram2, c=loadscreen, d=loadkbd);
	Or(a=loadram1, b=loadram2, out=loadram);
    RAM16K(in=in, load=loadram, address=address[0..13], out=ramout);
    Screen(in=in, load=loadscreen, address=address[0..12], out=scrout);
    Keyboard(out=kbout);
    Mux4Way16(a=ramout, b=ramout, c=scrout, d=kbout, sel=address[13..14], out=out);
    //Zero
    //Not16(in=in,out=make0);
    //And16(a=in,b=make0,out=Zero);
    //Not16(in=Zero,out=One);
    //Or16(a=Zero,b[0..14]=address,b[15]=false,out=address16);
    
    //V24576
    //ALU(x=in,y[15]=false,y[13..14]=true,y[0..12]=false,zx=true,nx=false,zy=false,ny=false,f=true,no=false,out=V24576,zr=zr0,ng=ng0);
    //ST24576(Smaller Than 24576)
    //EQ24576(EQual 24576)
    //address-24576
    //ALU(x=address16,y=V24576,zx=false,nx=false,zy=false,ny=true,f=true,no=false,out=GT24576,zr=EQ24576,ng=ST24576);
    //if ST24576 out=One
    //Mux16(a=address16,b=One,sel=ST24576,out=r1);

    
    //V16384
    //ALU(x=in,y[15]=false,y[0..13]=false,y[14]=true,zx=true,nx=false,zy=false,ny=false,f=true,no=false,out=V16384,zr=zr1,ng=ng1);
    //
    //ALU(x=address16,y=V16384,zx=false,nx=false,zy=false,ny=true,f=true,no=false,out[0..11]=hoge,out[12..15]=huga,zr=EQ16384,ng=ST16384);


    //invalid(address>24576)    
    //Not(in=ST24576,out=invalid);
    //keyboard(address==24576)
    //And(a=EQ24576,b=true,out=keyboard);
    //screen(16384<=address<24576)
    //Not(in=ST16384,out=GT16384);
    //Or(a=GT16384,b=EQ16384,out=GET16384);
    //And(a=ST24576,b=GET16384,out=screen);
    //ram
    //And(a=ST16384,b=true,out=ram);

    //And(a=load,b=ram,out=loadram);
    //And(a=load,b=screen,out=loadscreen);
    //RAM16K(in=in,load=loadram,address=address[0..13],out=VRAM);
    //Screen(in=in,load=loadscreen,address=address[0..12],out=VSCREEN0);
    //Keyboard(out=VKEYBOARD);
    


    //V20480
    //ALU(x=in,y[15]=false,y[0..11]=false,y[14]=true,y[13]=false,y[12]=true,zx=true,nx=false,zy=false,ny=false,f=true,no=false,out=V20480,zr=zr2,ng=ng2);
    //ALU(x=address16,y=V20480,zx=false,nx=false,zy=false,ny=true,no=false,out[0..11]=unchi,out[12..15]=unko,zr=EQ20480,ng=ST20480);

    //And(a=loadscreen,b=ST20480,out=loadscreen1);
    //Not(in=loadscreen1,out=loadscreen2);

    //RAM4K(in=in,load=loadscreen1,address=hoge,out=screen1);//Screen1
    //RAM4K(in=in,load=loadscreen2,address=unchi,out=screen2);//Screen2
    //Mux16(a=screen2,b=screen1,sel=ST20480,out=VSCREEN);
    
    //Or(a=screen,b=invalid,out=sel0);
    //Or(a=keyboard,b=invalid,out=sel1);
    //out
    //Mux4Way16(a=VRAM,b=VSCREEN0,c=VKEYBOARD,d=Zero,sel[0]=sel0,sel[1]=sel1,out=out);

}
