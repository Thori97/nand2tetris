// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //InstA     0vvv vvvv vvvv vvvv
    //          A<=V

    //InstC     111a cccc ccdd djjj
    //        

    //ALU
    //input OutDReg OutAReg inM instruction
    //output ALUResult
    ALU(x=OutDReg,y=AorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],
    out=ALUResult,zr=zero,ng=nega);
    Mux16(a=OutAReg,b=inM,sel=instruction[12],out=AorM);

    //ARegister
    //in ALUResult, instruciton
    //out OutAReg  
    And(a=Instruction[5],b=instruction[15],out=loadAFromALU);
    Mux16(a[0..14]=instruction[0..14],a[15]=false,b=ALUResult,sel=instruction[15], out=InARegValue);
    Not(in=instruction[15],out=loadFromImm);
    Or(a=loadAFromALU,b=loadFromImm,out=loadA);
    ARegister(in=InARegValue,load=loadA,out=OutAReg);

    //writeM
    //in instruction    out writeM
    And(a=instruction[3],b=true,out=writeM);

    //DRegister
    //input ALUResult
    //output OutDReg
    DRegister(in=ALUResult,load=instruction[4],out=OutDReg);

    //PC
    //input reset jump OutAReg
    //output pc
    PC(in=OutAReg,load=jump,inc=true,reset=reset,out[0..14]=pc);

    //jump
    //input nega posi zero instruction
    //output jump
    Not(in=nega,out=posi);
    And(a=instruction[0],b=posi,out=j0);
    And(a=instruction[1],b=zero,out=j1);
    And(a=instruction[2],b=nega,out=j2);
    Or(a=j0,b=j1,out=j01);
    Or(a=j01,b=j2,out=jump);
}